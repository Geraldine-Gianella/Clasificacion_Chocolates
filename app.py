# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIRDffWLwMHtzAnAzx87gRy3bu6zPkCM
"""

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime

# ==================== CONFIGURACI√ìN DE LA P√ÅGINA ====================
st.set_page_config(
    page_title="Clasificador de Chocolates üç´",
    page_icon="üç´",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==================== ESTILOS CSS PERSONALIZADOS ====================
st.markdown("""
    <style>
    /* Fondo y tema general */
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    /* Tarjetas con efecto glassmorphism */
    .card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(4px);
        border: 1px solid rgba(255, 255, 255, 0.18);
        margin: 15px 0;
    }

    /* T√≠tulo principal */
    .main-title {
        font-size: 3.5em;
        font-weight: 800;
        text-align: center;
        background: linear-gradient(120deg, #f093fb 0%, #f5576c 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    /* Subt√≠tulo */
    .subtitle {
        text-align: center;
        font-size: 1.3em;
        color: #ffffff;
        margin-bottom: 30px;
        font-weight: 300;
    }

    /* M√©tricas personalizadas */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 10px 0;
    }

    .metric-value {
        font-size: 2.5em;
        font-weight: bold;
    }

    .metric-label {
        font-size: 1em;
        opacity: 0.9;
    }

    /* Botones */
    .stButton>button {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px;
        font-size: 1.1em;
        font-weight: 600;
        border-radius: 10px;
        transition: all 0.3s;
    }

    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }

    /* Separador decorativo */
    .separator {
        height: 3px;
        background: linear-gradient(90deg, transparent, #667eea, transparent);
        margin: 30px 0;
    }

    /* Alerta de predicci√≥n */
    .prediction-box {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 30px;
        border-radius: 15px;
        color: white;
        text-align: center;
        font-size: 1.5em;
        font-weight: bold;
        margin: 20px 0;
        box-shadow: 0 10px 30px rgba(245, 87, 108, 0.3);
    }

    /* Sidebar */
    .css-1d391kg {
        background: rgba(255, 255, 255, 0.05);
    }

    /* Info boxes */
    .info-box {
        background: rgba(102, 126, 234, 0.1);
        border-left: 4px solid #667eea;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
    }
    </style>
""", unsafe_allow_html=True)

# ==================== FUNCIONES AUXILIARES ====================

@st.cache_resource
def cargar_modelo():
    """Carga el modelo entrenado"""
    try:
        modelo = load_model('modelo_chocolates.h5')
        return modelo
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None

def preprocesar_imagen(imagen):
    """Preprocesa la imagen para el modelo"""
    img = imagen.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

def predecir(modelo, imagen):
    """Realiza la predicci√≥n"""
    clases = ['Hershey', 'Princesa', 'Sublime', 'Tri√°ngulo']
    img_procesada = preprocesar_imagen(imagen)
    predicciones = modelo.predict(img_procesada, verbose=0)[0]

    return {
        'clases': clases,
        'probabilidades': predicciones,
        'prediccion': clases[np.argmax(predicciones)],
        'confianza': float(np.max(predicciones))
    }

def crear_grafico_barras(resultados):
    """Crea un gr√°fico de barras interactivo con Plotly"""
    colores = ['#667eea', '#764ba2', '#f093fb', '#f5576c']

    fig = go.Figure(data=[
        go.Bar(
            x=resultados['clases'],
            y=resultados['probabilidades'] * 100,
            marker=dict(
                color=colores,
                line=dict(color='white', width=2)
            ),
            text=[f"{p*100:.2f}%" for p in resultados['probabilidades']],
            textposition='outside',
            textfont=dict(size=14, color='white', family='Arial Black'),
            hovertemplate='<b>%{x}</b><br>Probabilidad: %{y:.2f}%<extra></extra>'
        )
    ])

    fig.update_layout(
        title={
            'text': 'üìä Probabilidades de Clasificaci√≥n',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 24, 'color': 'white', 'family': 'Arial Black'}
        },
        xaxis_title='Tipo de Chocolate',
        yaxis_title='Probabilidad (%)',
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white', size=14),
        yaxis=dict(range=[0, 105], gridcolor='rgba(255,255,255,0.2)'),
        xaxis=dict(gridcolor='rgba(255,255,255,0.2)'),
        height=450,
        margin=dict(t=100, b=50, l=50, r=50)
    )

    return fig

def crear_grafico_gauge(confianza):
    """Crea un medidor de confianza"""
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=confianza * 100,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': "Nivel de Confianza", 'font': {'size': 24, 'color': 'white'}},
        delta={'reference': 80, 'increasing': {'color': "lightgreen"}},
        gauge={
            'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': "white"},
            'bar': {'color': "lightgreen" if confianza > 0.8 else "orange"},
            'bgcolor': "rgba(255,255,255,0.1)",
            'borderwidth': 2,
            'bordercolor': "white",
            'steps': [
                {'range': [0, 50], 'color': 'rgba(255, 0, 0, 0.3)'},
                {'range': [50, 80], 'color': 'rgba(255, 165, 0, 0.3)'},
                {'range': [80, 100], 'color': 'rgba(0, 255, 0, 0.3)'}
            ],
            'threshold': {
                'line': {'color': "white", 'width': 4},
                'thickness': 0.75,
                'value': 90
            }
        }
    ))

    fig.update_layout(
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font={'color': "white", 'family': "Arial"},
        height=300,
        margin=dict(l=20, r=20, t=50, b=20)
    )

    return fig

# ==================== INTERFAZ PRINCIPAL ====================

def main():
    # T√≠tulo principal
    st.markdown('<h1 class="main-title">üç´ Clasificador Inteligente de Chocolates</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">Powered by Deep Learning | MobileNetV3 Architecture</p>', unsafe_allow_html=True)
    st.markdown('<div class="separator"></div>', unsafe_allow_html=True)

    # ==================== SIDEBAR ====================
    with st.sidebar:
        st.image("https://img.icons8.com/fluency/96/chocolate-bar.png", width=100)
        st.markdown("## üìã Informaci√≥n del Proyecto")

        st.markdown("""
        <div class="info-box">
        <strong>üéØ Objetivo:</strong><br>
        Clasificar autom√°ticamente diferentes marcas de chocolates peruanos
        utilizando t√©cnicas de Deep Learning y Transfer Learning.
        </div>
        """, unsafe_allow_html=True)

        st.markdown("### üç´ Clases Detectadas")
        st.markdown("""
        - **Hershey's** üá∫üá∏
        - **Princesa** üëë
        - **Sublime** ‚≠ê
        - **Tri√°ngulo** üî∫
        """)

        st.markdown("---")

        st.markdown("### üî¨ Especificaciones T√©cnicas")
        st.markdown("""
        - **Modelo:** MobileNetV3-Small
        - **Dataset:** 248 im√°genes
        - **Accuracy:** ~92%
        - **Framework:** TensorFlow/Keras
        - **Augmentation:** Avanzado
        """)

        st.markdown("---")

        unalm_img = Image.open("unalm.jpg")
        st.markdown("### UNIVERSIDAD NACIONAL AGRARIA LA MOLINA")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
             st.image(unalm_img, width=100)

        st.markdown("---")
        st.markdown(f"**üìÖ Fecha:** {datetime.now().strftime('%d/%m/%Y')}")
        st.markdown("**üë®‚Äçüíª Desarrollado con:** Streamlit + TensorFlow")

    # ==================== CONTEXTO DEL CASO DE ESTUDIO ====================
    with st.expander("üìñ Acerca de este Proyecto", expanded=False):
        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown("""
            ### üéì Caso de Estudio: Clasificaci√≥n Autom√°tica de Productos

            Este proyecto presenta el desarrollo de un **sistema de visi√≥n por computadora** enfocado en la **clasificaci√≥n autom√°tica de chocolates comerciales**
            distribuidos en el mercado peruano. La iniciativa busca integrar t√©cnicas modernas de **aprendizaje profundo** dentro de un entorno accesible e
            interactivo, facilitando su aplicaci√≥n en contextos reales de **retail, control de stock y gesti√≥n automatizada de productos.

            #### Problem√°tica
            En entornos de venta y distribuci√≥n, la **identificaci√≥n manual de productos** suele ser un proceso repetitivo, demandante en tiempo y propenso a
            errores humanos. Frente a esta limitaci√≥n, el sistema propuesto utiliza algoritmos de **inteligencia artificial** capaces de reconocer autom√°ticamente
            distintos tipos de chocolates a partir de im√°genes, mejorando la **eficiencia operativa** y reduciendo errores en la clasificaci√≥n visual.

            #### Tecnolog√≠a
            - üß† **Transfer Learning:** Se emplea la arquitectura **MobileNetV3**, previamente entrenada en el dataset **ImageNet**, como base para el aprendizaje de caracter√≠sticas visuales.
            - üß© **Data Augmentation:** Se aplicaron t√©cnicas como rotaci√≥n, desplazamiento, zoom, y variaciones de brillo para incrementar la diversidad del conjunto de entrenamiento y evitar el sobreajuste.
            - üîß **Fine-tuning:** Se ajustaron las capas finales del modelo para adaptarlo espec√≠ficamente a las cuatro clases definidas en este estudio: *Tri√°ngulo, Princesa, Hershey y Sublime*.
            - üíª **Implementaci√≥n:** Todo el sistema fue desarrollado en **Python**, utilizando **TensorFlow** y desplegado mediante **Streamlit** para ofrecer una interfaz sencilla y visualmente amigable.


            #### Resultados
            El modelo alcanz√≥ una **precisi√≥n del 92.31%** en el conjunto de validaci√≥n, demostrando una alta capacidad de **generalizaci√≥n ante im√°genes no vistas**. Los resultados confirman
            la viabilidad de aplicar **redes neuronales convolucionales (CNN)** a problemas reales de reconocimiento de productos, abriendo paso a soluciones m√°s amplias en
            **automatizaci√≥n comercial, auditor√≠a visual y marketing digital.**

            #### Conclusi√≥n

            El clasificador de chocolates representa un ejemplo pr√°ctico de c√≥mo la **inteligencia artificial aplicada** puede transformar tareas cotidianas en procesos
             **r√°pidos, confiables y escalables**. Este caso de estudio sienta las bases para futuras implementaciones en **otros sectores de consumo**, como bebidas,
             snacks o productos de limpieza, ampliando el alcance del reconocimiento visual automatizado en el mercado peruano.
            """)
        hershey_img = Image.open("hershey_1.jpg")
        princesa_img = Image.open("princesa_1.jpg")
        sublime_img = Image.open("sublime_1.jpg")
        triangulo_img = Image.open("triangulo_1.jpg")

        with col2:
          st.info("Ejemplo de cada chocolate")

          try:
              st.image(hershey_img, caption="Ejemplo: Hershey's", use_container_width=True)
              st.image(princesa_img, caption="Ejemplo: Princesa", use_container_width=True)
              st.image(sublime_img, caption="Ejemplo: Sublime", use_container_width=True)
              st.image(triangulo_img, caption="Ejemplo: Tri√°ngulo", use_container_width=True)
          except FileNotFoundError as e:
              st.error("‚ùå No se encontraron las im√°genes. Aseg√∫rate de que est√©n en la misma carpeta que el archivo app.py")


    # ==================== ZONA DE CARGA Y PREDICCI√ìN ====================
    st.markdown("## üì§ Cargar Imagen para Clasificaci√≥n")

    col1, col2 = st.columns([1, 1])

    with col1:
        st.markdown('<div class="card">', unsafe_allow_html=True)

        # Uploader de imagen
        uploaded_file = st.file_uploader(
            "Selecciona una imagen de chocolate",
            type=['jpg', 'jpeg', 'png'],
            help="Formatos soportados: JPG, JPEG, PNG"
        )

        if uploaded_file is not None:
            imagen = Image.open(uploaded_file)
            st.image(imagen, caption='Imagen cargada', use_container_width=True, width=200)


            st.success("‚úÖ Imagen cargada correctamente")


        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)

        if uploaded_file is not None:
            # Bot√≥n de predicci√≥n
            if st.button("üîÆ Realizar Predicci√≥n", use_container_width=True):
                with st.spinner("ü§ñ Analizando imagen..."):
                    # Cargar modelo
                    modelo = cargar_modelo()

                    if modelo is not None:
                        # Realizar predicci√≥n
                        resultados = predecir(modelo, imagen)

                        # Mostrar resultado principal
                        st.markdown(f"""
                        <div class="prediction-box">
                            üéØ Predicci√≥n: <strong>{resultados['prediccion']}</strong>
                        </div>
                        """, unsafe_allow_html=True)

                        # Medidor de confianza
                        st.plotly_chart(
                            crear_grafico_gauge(resultados['confianza']),
                            use_container_width=True
                        )

                        # Interpretaci√≥n de confianza
                        if resultados['confianza'] > 0.9:
                            st.success("üéâ Predicci√≥n muy confiable!")
                        elif resultados['confianza'] > 0.7:
                            st.info("üëç Predicci√≥n confiable")
                        else:
                            st.warning("‚ö†Ô∏è Predicci√≥n con baja confianza. Intenta con otra imagen.")
        else:
            st.info("üëÜ Carga una imagen para comenzar")

        st.markdown('</div>', unsafe_allow_html=True)

    # ==================== GR√ÅFICO DE PROBABILIDADES ====================
    if uploaded_file is not None and 'resultados' in locals():
        st.markdown("---")
        st.plotly_chart(
            crear_grafico_barras(resultados),
            use_container_width=True
        )

        # ==================== TABLA DETALLADA ====================
        st.markdown("### üìä Detalle de Probabilidades")

        col1, col2, col3, col4 = st.columns(4)

        for i, (col, clase, prob) in enumerate(zip(
            [col1, col2, col3, col4],
            resultados['clases'],
            resultados['probabilidades']
        )):
            with col:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">{clase}</div>
                    <div class="metric-value">{prob*100:.1f}%</div>
                </div>
                """, unsafe_allow_html=True)

    # ==================== SECCI√ìN DE M√âTRICAS DEL MODELO ====================
    st.markdown("---")
    st.markdown("## üìà Rendimiento del Modelo")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(label="üéØ Accuracy", value="92.31%", delta="7% mejora")
    with col2:
        st.metric(label="üìä Dataset", value="248 imgs", delta="62 por clase")
    with col3:
        st.metric(label="‚ö° √âpocas", value="50", delta="30 + 20 fine-tune")
    with col4:
        st.metric(label="üèÜ Val Loss", value="2.25", delta="-0.13")

    # ==================== FOOTER ====================
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: white; padding: 20px;">
        <p>üç´ <strong>Clasificador de Chocolates</strong> | Desarrollado usando Streamlit y TensorFlow</p>
        <p>üìß <strong>Desarrollado por:</strong><br>
       Geraldine Geronimo Oscano <br>
       Betsab√© Roca Matias<br>
       Edwar Carrasco Casta√±eda
    </p>
    </div>
    """, unsafe_allow_html=True)

# ==================== EJECUCI√ìN ====================
if __name__ == "__main__":
    main()